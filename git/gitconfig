[color]
	ui = auto

[core]
	editor = nvim

[alias]
	# shortcuts for simple commands
	co = checkout
	st = status
	showp = show --patch-with-stat
	cpx = cherry-pick -x
	sw = switch

	# branch management
	b = branch -v
	ba = branch -a
	bd = branch -d
	bdd = branch -D
	br = branch -r
	bc = rev-parse --abbrev-ref HEAD
	bdr = "!f() { git push $1 :$2; }; f"

	# push aliases
	ps = push
	psf = push -f
	psu = push -u
	pst = push --tags

	pso = push origin
	psuo = push -u origin
	psao = push --all origin
	psfo = push -f origin

	psom = push origin master
	psfom = push -f origin master
	psuom = push -u origin master

	psoc = !git push origin $(git bc)
	psfoc = !git push -f origin $(git bc)
	psuoc = !git push -u origin $(git bc)

	# View abbreviated SHA, description, and history graph
	l = log --pretty=oneline --graph --abbrev-commit

	# pretty print commits
	lp = log --all --graph --decorate --oneline --simplify-by-decoration

	# extra show stats
	logs = log --stat

	# extra show stats
	logp = log --patch-with-stat

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	lo = !"git checkout -- .; git clean -df || clear"

	# extra show stats
	diffp = diff --patch-with-stat
	diff = diff --word-diff

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	pr = pull --rebase

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av
	app = apply --reject --whitespace=fix

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	remotes = remote -v
	cleans = clean -df
	cos = checkout -- .

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Extract number of n commits to specified folder
	extract = "!f() { git format-patch -n$1 -o /tmp/$2; }; f"

	# refs:
	# https://t.ly/r5xO
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red bold # deletions
	new = green bold # additions
	commit = yellow bold
	whitespace = red reverse

[push]
	default = matching

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[include]
	path = ~/.gitconfig_custom
	path = ~/.gitconfig_delta

[credential]
	helper = store
