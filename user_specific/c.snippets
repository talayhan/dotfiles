## Main
# main
snippet main
	int main(int argc, const char *argv[])
	{
		${0}
		return 0;
	}
# main(void)
snippet mainn
	int main(void)
	{
		${0}
		return 0;
	}
##
## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */
##
## Control Statements
# if
snippet if
	if (${1:true}) {
		${0:${VISUAL}}
	}
snippet ife
	if (${1:true}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
# else
snippet el
	else {
		${0:${VISUAL}}
	}
# else if
snippet elif
	else if (${1:true}) {
		${0:${VISUAL}}
	}
# ifi
snippet ifi
	if (${1:true}) ${0};
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
snippet ret
	return ${0};
##
## Loops
# for
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# for (custom)
snippet forr
	for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}
# do... while
snippet do
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});
##
## Functions
# function definition
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
# function definition with zero parameters
snippet fun0
	${1:void} ${2:function_name}()
	{
		${3}
	}
# function definition with Doxygen documentation
snippet dfun0
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \return ${3:Return parameter description}
	 */
	${4:void} ${5:function_name}()
	{
		${6}
	}
# function definition with one parameter
snippet fun1
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter})
	{
		${5}
	}
# function definition with one parameter with  Doxygen documentation
snippet dfun1
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \return ${5:Return parameter description}
	 */
	${6:void} ${7:function_name}(${8:Type} ${3:Parameter})
	{
		${9}
	}
# function definition with two parameters
snippet fun2
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})
	{
		${7}
	}
# function definition with two parameters with  Doxygen documentation
snippet dfun2
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \param $5 ${6:Parameter description}
	 * \return ${7:Return parameter description}
	 */
	${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter})
	{
		${12}
	}
# function definition with two parameters
snippet fun3
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})
	{
		${9}
	}
# function definition with two parameters with  Doxygen documentation
snippet dfun3
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \param $5 ${6:Parameter description}
	 * \param $7 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter})
	{
		${15}
	}
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});
##
## Types
# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	/*! \struct $1
	 *  \brief ${3:Brief struct description}
	 *
	 *  ${4:Detailed description}
	 */
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:Data} /*!< ${4:Description} */
	}${5: /* optional variable list */};
# typedef struct
snippet tds
	/*! \struct $2
	 *  \brief ${5:Brief struct description}
	 *
	 *  ${6:Detailed description}
	 */
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet enum
	/*! \enum $1
	 *
	 *  ${2:Detailed description}
	 */
	enum ${1:name} { ${0} };
# typedef enum
snippet tde
	/*! \enum $2
	 *
	 *  ${4:Detailed description}
	 */
	typedef enum {
		${1:Data} /*!< ${3:Description} */
	} ${2:foo};
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n"${2});
snippet prr
	printf("\033[0;32m[%s-%d]${1:%s}\n\033[0m", __func__, __LINE__, ${2});
snippet dbf
	debugf("${1:%s}"${2});
snippet dbfe
	debugf("enter");
snippet prfl
	printf("[%s-%d]${1}\n", __func__, __LINE__, ${2});
snippet prkl
	printk("[%s-%d]${1}\n", __func__, __LINE__, ${2});
snippet prflno
	printf("[%s-%d]${1}\n", __func__, __LINE__);
snippet prenter
	printf("[%s-%d]===================================\n", __func__, __LINE__);
	printf("[%s-%d] Enter\n", __func__, __LINE__);
	printf("[%s-%d]===================================\n", __func__, __LINE__);
snippet controllerf
	controller_errorf("${1}");
snippet hello
	printf("[%s-%d]hello\n", __func__, __LINE__);
snippet prklno
	printk("[%s-%d]${1}\n", __func__, __LINE__);
snippet prfll
	printf("[%s-%d] called from (%s-%d)\n", __func__, __LINE__, func, line);
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
snippet fprfl
	fprintf(stderr, "[%s-%d]${1}\n", __func__, __LINE__);
snippet prd
	printf("${1:} = %d\n", $1);
snippet prf
	printf("${1:} = %f\n", $1);
snippet prx
	printf("${1:} = %${2}\n", $1);
snippet cf
	/** @brief
	 *
	 *  @param
	 *  @return Void.
	 */
# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
# NCURSES related function snippets
snippet prw
	printw("${0}\n");
snippet ninit
	initscr();	/* initialize ncurses screen */
	refresh();	/* display the result */
	getch();	/* wait */

	endwin();	/* clean up ncurses */
snippet addstr
	addstr("${0}\n");
# coding convention
snippet chead
	/*##########################################################################*/
	/*                                                                          */
	/* ${1:`vim_snippets#Filename("$1.")`}                                      */
	/* ­­­­­­­­­                                                                */
	/* Created on ${2:date} by ${3:author}                                      */
	/*                                                                          */
	/* Description                                                              */
	/* ${4}­­­­­­­­­­­                                                          */
	/*                                                                          */
	/* Notes                                                                    */
	/* ­­­­­                                                                    */
	/* References                                                               */
	/* ­­­­­­­­­­                                                               */
	/* (If any)                                                                 */
	/*                                                                          */
	/*##########################################################################*/
snippet cinc
	/*--------------------------------------------------------------------------*/
	/*                               Includes                                   */
	/*--------------------------------------------------------------------------*/
snippet cdef
	/*--------------------------------------------------------------------------*/
	/*                               #defines                                   */
	/*--------------------------------------------------------------------------*/
snippet ctd
	/*--------------------------------------------------------------------------*/
	/*                               typedefs                                   */
	/*--------------------------------------------------------------------------*/
snippet cfun
	/*--------------------------------------------------------------------------*/
	/*                          Function Prototypes                             */
	/*--------------------------------------------------------------------------*/
snippet cend
	/*##########################################################################*/
	/*                           End of ${1:`vim_snippets#Filename("$1.")`}     */
	/*##########################################################################*/
##
# TODO section
snippet todo
	/*! TODO: ${1:Todo description here}
	 *  \todo $1
	 */
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
#helper functions
#how to use hex2bin
snippet hex2binuse
	uint8_t str_bin[BIN_TOT_LEN];
	int i, ret;

	if (strlen(str) != (BIN_TOT_LEN * 2)) {
		printk("invalid str length\n");
		return -1;
	}

	for (i = 0; i < BIN_TOT_LEN; i++) {
		ret = hex2bin(str + i * 2);
		if (ret < 0) {
			printk("error on parsing str\n");
			return -1;
		}
		str_bin[i] = ret;
	}

snippet hex2binfun
	static inline int __hex2bin (char c)
	{
		if (c >= '0' && c <= '9')
			return c - '0';
		if (c >= 'a' && c <= 'f')
			return c - 'a' + 10;
		if (c >= 'A' && c <= 'F')
			return c - 'A' + 10;
		return -1;
	}

	static inline int hex2bin (char *hexstr)
	{
		int ret, bin;

		ret = __hex2bin(hexstr[0]);
		if (ret < 0)
			return -1;
		bin = ret;
		bin <<= 4;

		ret = __hex2bin(hexstr[1]);
		if (ret < 0)
			return -1;
		bin |= ret;

		return bin;
	}
#network byte order is always big endian
snippet endian
	if ( htonl(47) == 47 ) {	/* big endian */
		${1}
	} else {			/* little endian */
		${2}
	}
snippet ether_etoa
	static char *
	ether_etoa(const struct ether_addr *n)
	{
		static char etoa_buf[ETHER_ADDR_LEN * 3];
		char *c = etoa_buf;
		int i;

		for (i = 0; i < ETHER_ADDR_LEN; i++) {
			if (i)
				*c++ = ':';
			c += sprintf(c, "%02X", n->octet[i] & 0xff);
		}
		return etoa_buf;
	}
snippet ether_atoe
	/* Converts string MAC address to structure */
	static int
	ether_atoe(const char *a, struct ether_addr *n)
	{
		char *c = NULL;
		int i = 0;

		memset(n, 0, ETHER_ADDR_LEN);
		for (;;) {
			n->octet[i++] = (uint8)strtoul(a, &c, 16);
			if (!*c++ || i == ETHER_ADDR_LEN)
				break;
			a = c;
		}
		return !(i == ETHER_ADDR_LEN);
	}
