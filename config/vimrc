call plug#begin('~/.vim/plugged')

" Playground
Plug 'talayhan/s-vim'

" Life saver
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'			"GV - git commit browser - requires vim-fugitive
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
"Plug 'xolox/vim-easytags'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-dispatch'

" Cosmetics
Plug 'sainnhe/gruvbox-material'
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'ryanoasis/vim-devicons'

" Text Utils
Plug 'easymotion/vim-easymotion'
Plug 'vim-scripts/MultipleSearch'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
Plug 'lervag/vimtex'
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-abolish'

" General helper
"Plug 'wesQ3/vim-windowswap'
Plug 'will133/vim-dirdiff'

" Syntax checking
Plug 'sheerun/vim-polyglot'
Plug 'vim-syntastic/syntastic'
Plug 'SirVer/ultisnips'
Plug 'talayhan/vim-snippets'
Plug 'godlygeek/tabular'
Plug 'Raimondi/delimitMate'
Plug 'wellle/tmux-complete.vim'
Plug 'tpope/vim-surround'		"cst\", ysiw<em>, ds\"
Plug 'ntpeters/vim-better-whitespace'	"\:Stripwhitespace

" Web
Plug 'pangloss/vim-javascript'
Plug 'maksimr/vim-jsbeautify'
Plug 'mattn/emmet-vim'

" Programming Language Specific
Plug 'rhysd/vim-clang-format'

" Utils
Plug 'mhinz/vim-grepper'
if has('nvim')
	" Use release branch (recommend)
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
else
	Plug 'Shougo/neocomplete.vim'
endif
Plug 'rhysd/committia.vim'
Plug 'chrisbra/vim-diff-enhanced'
Plug 'vim-scripts/zoomwin'

if has('nvim-0.6')
	Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
	Plug 'nvim-lua/plenary.nvim'
	Plug 'nvim-telescope/telescope.nvim'
else
	Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
	Plug 'junegunn/fzf.vim'
endif

" LRU
Plug 'xolox/vim-misc'
Plug 'vim-scripts/a.vim'
"Plug 'autozimu/LanguageClient-neovim', {
    "\ 'branch': 'next',
    "\ 'do': 'bash install.sh',
    "\ }

" On test stage
"Plug 'vim-utils/vim-man'
Plug 'tricktux/pomodoro.vim'

call plug#end()

"""""""""""""""""""""""""""""""
set nocompatible

if &t_Co > 2 || has("gui_running")
	syntax on
endif

"256 color terminal
set t_Co=256

"longer history
set history=10000

"better commandline
set wildmenu

"proper tab completion behavior in command line
set wildmode=longest:full,full

"mouse support
set mouse=a

"case sensitive search when there's a capital letter
set ignorecase smartcase

"fix set backspace, vim8.0 causing backspace problem
set backspace=indent,eol,start

"convert new tabs to space
"set tabstop=2 shiftwidth=2 expandtab
"also existing ones
":retab

"tab/space stuff, insert 4 spaces with tab
set tabstop=8
set shiftwidth=8
set softtabstop=0
set smarttab
"set expandtab

" tabstop:          Width of tab character
" " softtabstop:      Fine tunes the amount of white space to be added
" " shiftwidth        Determines the amount of whitespace to add in normal
" mode
" " expandtab:        When on uses space instead of tabs
"" set tabstop     =4
"" set softtabstop =8
"" set shiftwidth  =4
"" set expandtab

"highlight tabs as >--, and trailing whitespace with -
set list
set listchars=tab:>-,trail:-

"buffers remember their states
set hidden

"search as it's being typed
set incsearch

"highlight search matches
set hlsearch

"s/././g by default
set gdefault

"do not wrap searches at the end of the files
set nowrapscan

"relative line numbers
"set relativenumber
set number

set autoindent
"set smartindent

set title
set ls=2

" use buffer the system clipboard by default.
set clipboard=unnamedplus

"start scrolling at 3rd row
set scrolloff=3

"default encoding
if has('vim')
	set encoding=utf-8
	set fileencoding=utf-8
endif

"show matching brackets as they're inserted
set showmatch

"preserve undo states but no keep backup
set undofile
set nobackup
set nowritebackup

"make vim more responsive
set lazyredraw
set ttyfast

"reduce ESC delay
set timeout           " for mappings
set timeoutlen=1000   " default value
set ttimeout          " for key codes
set ttimeoutlen=10    " unnoticeable small value

"ignore whitespace in diffs (messes up Gdiff)
set diffopt+=iwhite

filetype plugin indent on
filetype plugin on
set ofu=syntaxcomplete#Complete

"config cscope
set nosplitright
set cscopequickfix=s-,c-,d-,i-,t-,e-,g-
set cst

if has("cscope")
    " add any database in current directory
    if filereadable(".cscope/cscope.out")
        cs add .cscope/cscope.out
    endif
endif

"custom mappings
let mapleader=","

"swap 0 and ^ behavior
noremap ^ 0
noremap 0 ^

"copy/paste clipboard
map <leader>y "+y
map <leader>p "+p

"disable highlight
nnoremap <leader><space> :noh<cr>
"remove trailing whitespace
"use :Stripwhitespace from vim-better-whitespace

"cscope mappings
"nnoremap <leader>r :cs find 0 <C-R>=expand("<cword>")<CR><CR>z<CR> :cope<CR><CR>
nnoremap <leader>r :Grepper -tool git -open -switch -cword -noprompt<cr>
nnoremap <leader>d :cs find 1 <C-R>=expand("<cword>")<CR><CR>z<CR> :cope<CR><CR>
nnoremap <leader>v :cs find 3 <C-R>=expand("<cword>")<CR><CR>z<CR> :cope<CR><CR>

"nnoremap <leader>R :vert scs find 0 <C-R>=expand("<cword>")<CR><CR>z<CR> :cope<CR><CR>
nnoremap <leader>D :vert scs find 1 <C-R>=expand("<cword>")<CR><CR>z<CR> :cope<CR><CR>
nnoremap <leader>V :vert scs find 3 <C-R>=expand("<cword>")<CR><CR>z<CR> :cope<CR><CR>
nnoremap <leader>N :GrepperRg -tc <C-R>=expand("<cword>")<CR><CR>

"disable f1
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

"switch between last buffer with space
nnoremap <space> <C-^>

"c-hjkl to move between splits
nnoremap <c-h> <C-w>h
nnoremap <c-j> <C-w>j
nnoremap <c-k> <C-w>k
nnoremap <c-l> <C-w>l

"shortcut for closing other splits
noremap <leader>o <C-w>o

"better command mode behavior for c-n and c-p
cnoremap <c-n>  <down>
cnoremap <c-p>  <up>

"move visually correct when line is wrapped
noremap j gj
noremap k gk

"center after certain movements
noremap * *zz
noremap # #zz
noremap n nzz
noremap N Nzz
noremap ]] ]]zz
noremap [[ [[zz
noremap {{ {{zz
noremap }} }}zz

"" Abbreviations
"" no one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev w1 w!
cnoreabbrev w1 w!
cnoreabbrev W1 w!
cnoreabbrev Wa! wa!
cnoreabbrev wa1 wa!
cnoreabbrev Wa1 wa!
cnoreabbrev wA1 wa!
cnoreabbrev Wqa! wqa!
cnoreabbrev Q! q!
cnoreabbrev Qa! qa!
cnoreabbrev qaa! qa!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev q1 q!
cnoreabbrev Wa wa
cnoreabbrev Wa! wa!
cnoreabbrev wQ wq
cnoreabbrev wQ! wq!
cnoreabbrev WQ wq
cnoreabbrev WQ! wq!
cnoreabbrev Wqa wqa
cnoreabbrev WQa wqa
cnoreabbrev WQa! wqa!
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

nnoremap <leader>p :exe "Search ".expand('<cWORD>')<CR>

"jk to go to normal mode
"inoremap jk <esc>

if has('nvim')
" map to exit terminal mode with ESC
tnoremap <Esc> <C-\><C-n>
endif

"disable new line comments with o
autocmd FileType * setlocal formatoptions-=o

"colorscheme set
set background=dark
"let g:gruvbox_contrast_light="medium"
"let g:gruvbox_contrast_dark="medium"
"set background=light
if has('termguicolors')
    set termguicolors
endif
let g:gruvbox_italics=1
let g:gruvbox_italicize_strings=1
let g:gruvbox_filetype_hi_groups = 1
let g:gruvbox_plugin_hi_groups = 1
let g:gruvbox_material_background = 'soft'
"colorscheme gruvbox-material

let g:gruvbox_contrast_dark = 'medium'
colorscheme gruvbox

"highlight current line number with a different color
highlight Highlighted ctermfg=231 ctermbg=24 cterm=NONE
highlight! link CursorLineNr Highlighted

" Maximize quickfix windows' width
function! MaxQuickfixWin()
    if &buftype ==# "quickfix"
        execute "normal! \<c-w>J"
    endif
endfunction
augroup MaxQuickfixWinGrp
    autocmd!
    autocmd BufWinEnter * call MaxQuickfixWin()
augroup END

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

nnoremap <silent> <C-w>z :ZoomWin<CR>

"auto close info buffer thing after completion
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"plugin related configs start here
nnoremap <F3> :<C-U>setlocal lcs=tab:>-,trail:-,eol:$ list! list? <CR>
nnoremap <F6> :NERDTreeToggle<CR>
nmap <F8> :TagbarToggle<CR>

" Emmet configs just for html css files
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall"

" Easymotion configs All motions will then be triggered with <Leader>
" <Leader>s, <Leader>gE.
let g:EasyMotion_leader_key="t"
map <Leader> <Plug>(easymotion-prefix)
" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
"
" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

map <Leader>5 :setlocal spell spelllang=en_us<cr>

"cucumbertables for tabularize
"ref:https://gist.github.com/tpope/287147
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" You can get the information about the windows with first argument as a dictionary.
"
"   KEY              VALUE                      AVAILABILITY
"-----------------------------------------------------------------------------------
"   vcs            : vcs type (e.g. 'git')   -> all hooks
"   edit_winnr     : winnr of edit window    -> ditto
"   edit_bufnr     : bufnr of edit window    -> ditto
"   diff_winnr     : winnr of diff window    -> ditto
"   diff_bufnr     : bufnr of diff window    -> ditto
"   status_winnr   : winnr of status window  -> all hooks except for 'diff_open' hook
"   status_bufnr   : bufnr of status window  -> ditto

let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    end

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

endfunction

let g:clang_format#style_options = {
            \ "IndentWidth" : 8,
            \ "ColumnLimit" : 80,
            \ "UseTab" : "Always",
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>

" enchanced diff
" started In Diff-Mode set diffexpr (plugin not loaded yet)
if &diff
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
endif

"custom trigger for snippets
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"syntastic checkers
let g:syntastic_python_checkers = ['pylint']
"let g:syntastic_python_checkers = ['pyflakes']
"let g:syntastic_python_checkers = ['pyflakes']
"let g:syntastic_python_checkers = ['pep8'asytags_suppress_ctags_warning = 1
"""""
"markdown preview
let g:instant_markdown_browser = "firefox --new-window"
let g:instant_markdown_autostart = 1
let g:instant_markdown_logfile = '/tmp/instant_markdown.log'

"\ 'colorscheme': 'powerline',
"lightline colorscheme
let g:lightline = {
	\ 'colorscheme': 'gruvbox_material',
	\ 'active': {
	\   'left': [ [ 'mode', 'paste' ],
	\             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
	\ },
	\ 'component_function': {
	\   'gitbranch': 'FugitiveHead'
	\ },
	\ }

command! PrettyPrintJSON %!python3 -m json.tool
command! PrettyPrintHTML !tidy -mi -html -wrap 0 %
command! PrettyPrintXML !tidy -mi -xml -wrap 0 %

"multiplesearch config
let g:MultipleSearchColorSequence = "blue,green,magenta,red,yellow,cyan,gray,brown"
let g:MultipleSearchMaxColors = 32
let g:MultipleSearchTextColorSequence = "white,black,white,white,black,black,black,white"

"neocomplete
if has('nvim')
	"let g:deoplete#enable_at_startup = 1
else
	let g:neocomplete#enable_at_startup = 1
endif
let g:gitgutter_max_signs = 2000
let g:clang_format#command = "clang-format"

" path to directory where library can be found
let g:clang_library_path='/usr/lib/llvm-10/lib'

" Give more space for displaying messages.
"set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)
command! -nargs=0 Prettier :CocCommand prettier.formatFile

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

"=========================================================
" Log completed pomodoros, 0 = False, 1 = True (default: 0)
let g:pomodoro_do_log = 1
" Path to the pomodoro log file (default: /tmp/pomodoro.log)
let g:pomodoro_log_file = "/tmp/pomodoro.log"
let g:pomodoro_notification_cmd = 'mpg123 -q ~/Music/pomodoro-notification.mp3 | zenity --info --text="Pomodoro finished"'
let g:pomodoro_time_work = 30
set statusline=%#ErrorMsg#%{pomo#status_bar()}%#StatusLine#

let g:ctrlp_map = ''
if has('nvim-0.6')
    nnoremap <c-p> :Telescope find_files<cr>
    nnoremap <C-g> :Telescope live_grep<Cr>
    nnoremap <Leader>R :lua require'telescope.builtin'.grep_string{}<CR>
else
    nnoremap <c-p> :Files<cr>
    nnoremap <C-g> :Ag<Cr>
endif

nmap glc <Plug>VimwikiToggleListItem<CR>

autocmd FileType typescript,javascript set expandtab
autocmd FileType typescript,javascript SCSpace

ca tn tabnew
ca th tabp
ca tl tabn
